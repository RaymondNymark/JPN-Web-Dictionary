@page "/"
@page "/Search"

@using Dictionary.Core.Services
@using Dictionary.Core.Models

@inject IDictionarySearchService _dictionarySearchService

<h3>Japanese Search!</h3>

<div id="main_search" class="main">
    <input type="text" placeholder="Love, happiness.." @bind-value="@_searchTerm" />
    <input type="button" value="Search" @onclick="@SearchDictionaryAsync" />
</div>
<br />
@if (dictionaryEntries == null)
{

}
else
{
    <div id="result_count">
        <h6>
            Results
            <span class="result_count"> ー @_entryCount found</span>
        </h6>
    </div>

    <table class="table">
        <tbody>
            @foreach (var entry in dictionaryEntries)
            {
                <tr>
                    <td>@(entry.JapaneseData.First().Word + $" [{entry.JapaneseData.First().Reading}]")</td>
                    @foreach (var englishData in entry.EnglishData)
                    {
                        string connectedDefinitionString = "";
                        string tags = "";

                        foreach (var definition in englishData.EnglishDefinitions)
                        {
                            connectedDefinitionString += $"{definition}; ";
                        }

                        foreach (var tag in englishData.PartsOfSpeech)
                        {
                            tags += $"{tag}, ";
                        }

                        <td>@(connectedDefinitionString + "(" + tags + ")")</td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<RetrievedDictionaryModel.Entry> dictionaryEntries;
    private string _searchTerm = string.Empty;
    private string _entryCount = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        //dictionaryEntries = await _dictionarySearchService.SearchDictionaryAsync("愛");
    }

    /// <summary>
    /// Searches the dictionary and updates dictionary entries using the _searchTerm property as the input.
    /// </summary>
    private async Task SearchDictionaryAsync()
    {
        var retrievedEntries = await _dictionarySearchService.SearchDictionaryAsync(_searchTerm);
        _entryCount = retrievedEntries.Count.ToString();

        dictionaryEntries = retrievedEntries;
    }
}
