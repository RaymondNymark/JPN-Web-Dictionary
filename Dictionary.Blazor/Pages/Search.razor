@page "/"
@page "/Search"

@using Dictionary.Core.Services
@using Dictionary.Core.Models

@inject IDictionarySearchService _dictionarySearchService

<h3>Japanese Search!</h3>

<div id="main_search" class="main">
    <input type="text" placeholder="Love, happiness.." @bind-value="@_searchTerm" />
    <input type="button" value="Search" @onclick="@SearchDictionaryAsync" />
</div>
<br />
@if (dictionaryEntries == null)
{

}
else
{
    <div id="result_count">
        <h5>
            Results
            <span class="result_count"> ー @_entryCount found</span>
        </h5>
    </div>
    <br />
    @foreach (var entry in dictionaryEntries)
    {
        <div class="single_dictionary_entry">
            <div class="japanese_info">
                <div class="japanese_word_entry">
                    <span class="japanese_hiragana">@entry.JapaneseData.First().Reading</span>
                    <span class="japanese_fullword">@entry.JapaneseData.First().Word</span>
                </div>
                <div class="japanese_tags">
                    <span class="jap_tags">(tags)</span>
                </div>
            </div>
            <div class="english_info">
                @foreach (var englishEntry in entry.EnglishData)
                {
                <div class="word_meaning">
                    <span class="meaning-tags">@String.Join(", ", englishEntry.PartsOfSpeech)</span>
                    <span class="meaning_definition">@($"{_localEnglishCount}. ") @String.Join("; ", englishEntry.EnglishDefinitions)</span>
                    <br />
                    <br />
                </div>
                    _localEnglishCount++;
                }
            </div>
            <br />
            <br />
        </div>
        _localEnglishCount = 1;
    }
    <br />
}

@code {
    private List<RetrievedDictionaryModel.Entry> dictionaryEntries;
    private string _searchTerm = string.Empty;
    private string _entryCount = string.Empty;
    private int _localEnglishCount = 1;

    protected override async Task OnInitializedAsync()
    {
        //dictionaryEntries = await _dictionarySearchService.SearchDictionaryAsync("愛");
    }

    /// <summary>
    /// Searches the dictionary and updates dictionary entries using the _searchTerm property as the input.
    /// </summary>
    private async Task SearchDictionaryAsync()
    {
        var retrievedEntries = await _dictionarySearchService.SearchDictionaryAsync(_searchTerm);
        _entryCount = retrievedEntries.Count.ToString();

        dictionaryEntries = retrievedEntries;
    }
}
